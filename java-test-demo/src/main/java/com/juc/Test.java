package com.juc;

import org.springframework.util.StopWatch;

import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class Test {
    public static void main(String[] args) {
//        /**
//        * 从结果看 一个锁对象不管加几次锁 都还是那一把锁  释放之后就结束了
//        * */
//        ReentrantLock lock = new ReentrantLock();
//        System.out.println("开始");
//        lock.lock();
//        System.out.println(0);
//        lock.lock();
//        System.out.println(1);
//        lock.unlock();
//        System.out.println(2);
//        //lock.unlock();
//        System.out.println(3);


        Data data = new Data();

        new Thread(()->{for (int i = 0; i < 10; i++)data.printA(); },"线程A->").start();
        new Thread(()->{for (int i = 0; i < 10; i++)data.printB(); },"线程B->").start();
        new Thread(()->{for (int i = 0; i < 10; i++)data.printC(); },"线程C->").start();

    }



}

class Data{
    //一把锁 三个线程一个一个进
    private ReentrantLock lock = new ReentrantLock();
    Condition condition1 = lock.newCondition();
    Condition condition2 = lock.newCondition();
    Condition condition3 = lock.newCondition();
    private int num = 1;
    public void printA(){
        lock.lock();
        try {
            while (num!=1){
                //等待
                condition1.await();
            }
            System.out.println(Thread.currentThread().getName()+"------>A");
            num=2;
            //唤醒第二个线程
            condition2.signal();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
    public void printB(){
        lock.lock();
        try {
            while (num!=2){
                //等待
                condition2.await();
            }
            System.out.println(Thread.currentThread().getName()+"------>B");
            num=3;
            //唤醒第二个线程
            condition3.signal();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
    public void printC(){
        lock.lock();

        try {
            while (num!=3){
                //等待
                condition3.await();
            }
            System.out.println(Thread.currentThread().getName()+"------>C");
            num=1;
            //唤醒第二个线程
            condition1.signal();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }

    }

}


class MaoPao1{
    public static void main(String[] args) {

        for (int k = 0; k < 20; k++) {
            Integer [] arrays  = {626,73377,93959,61970,95604,14832,46872,12856,92334,46658,38715,3889,65588,51628,91159,67725,52228,34565,76511,96496,34491,14705,66725,98238,15155,15575,58160,78023,44183,87996,23148,58871,39181,66582,96084,98543,72195,50873,79172,84291,2828,7932,31426,54847,71069,33742,56448,69927,6382,2268,86763,51959,64913,88228,49218,81883,63306,22224,93516,36927,85661,62577,84749,24159,52678,46291,30634,97490,60063,49526,57875,1082,82083,48435,35073,43417,40024,13305,34931,90400,73038,77972,17313,28874,35389,78124,80954,71267,97040,68439,23199,1701,71014,20974,98011,69765,80240,56975,35443,50223,63258,8641,72045,28300,77110,40,22694,45557,52336,4860,27631,70543,95390,63483,33153,10006,12301,6248,16591,97058,87192,66817,20256,87105,822,58677,4849,71304,56257,33133,20021,55101,69323,34235,94591,68945,6544,93300,22998,43775,4851,6022,50373,25948,61851,97745,35609,26933,70339,95127,41047,77625,90062,16117,49330,19502,17946,1635,93891,35621,59029,43678,50983,22134,33786,76722,13152,43935,81850,46605,52077,91961,72146,73034,62096,90685,27556,31528,92976,22417,49074,87503,15788,2148,38359,1137,42097,39824,71491,58375,54892,45146,70140,56745,61381,77692,92809,7647,65039,87144,45117,26490,81169,96970,20295,37558,72330,49001,48239,18643,69111,80796,42101,18866,78530,35715,43543,10839,8856,19938,22336,70934,36231,76358,77647,59864,24780,54148,86252,76154,10144,32740,25068,16759,63363,82352,68088,45770,97702,64383,11769,14365,83124,70591,19161,85402,86884,67870,87845,53192,63705,28826,42743,96434,99657,63225,84346,51708,55070,79126,33326,19948,79895,65580,71975,13672,65326,84153,60486,98697,32914,92636,55035,43270,48691,16290,38821,82383,18461,74791,49716,83839,4798,2824,75938,45587,23351,27666,80211,91155,53938,95461,83320,80993,90272,20247,68460,99225,48372,40877,29163,98566,51505,35162,22394,18839,14409,59671,68702,49203,69839,74231,68813,93380,29706,83596,65159,33349,11592,87634,59054,79551,1781,892,84750,26117,79131,80462,70574,65708,32053,80406,39983,63747,67706,22371,5072,96709,23134,20524,75867,26460,46467,21468,42188,25558,74914,6371,50876,85184,99704,60105,58054,57924,50571,75749,68623,97572,78046,44309,77532,14535,5706,49943,37880,15662,44961,29247,80046,86959,18425,35270,51294,83751,22873,45021,7041,74383,56814,78483,44539,87172,81738,10443,43501,84809,23525,35739,65663,76151,83476,72412,43080,490,99405,95284,82177,78761,34,52033,5351,5036,20881,34935,90055,53866,38238,49832,68530,47690,49785,51974,85436,97192,27125,89848,12923,76311,33448,84751,79776,33591,72047,96135,94610,65563,22841,23926,97896,21384,62530,51374,69083,21853,54780,48010,48552,55233,39809,25620,42714,1128,92311,90828,76921,55089,16151,83634,27198,92379,63984,77781,55953,59065,81646,80886,38907,91261,22970,93165,67410,30396,77791,27434,13976,80803,84699,25628,75152,25022,31278,66414,87825,14622,21496,32190,36893,93136,71353,19059,79767,72091,44013,87970,86046,60660,41155,26332,23133,25383,69665,55112,47898,79581,59274,17248,80639,71877,3823,40652,51087,62062,82585,69487,75504,95459,12761,84096,2006,9436,17591,43387,84977,60385,44643,59592,16810,2653,63055,87166,58063,14138,63564,63100,71062,19761,87855,95277,52991,66327,94852,97866,10946,88449,96418,77318,98037,64297,71273,88717,64350,33744,84535,30989,49810,11366,70533,37416,95911,85529,66310,10347,2409,29727,19531,76520,77412,44623,76943,55588,54947,19086,77056,77824,98326,32172,79721,16577,79651,67830,62709,1892,1070,8982,56389,99268,30149,4089,22707,93088,64851,63206,5753,36192,38041,35209,2998,86707,94288,78354,90362,6407,65117,78191,57953,22489,98765,38727,48941,93753,77334,9682,46949,56747,22511,20315,28751,77477,47669,68753,23189,59646,24493,57039,63844,80107,21230,64008,81406,2903,54781,67065,81987,65932,90069,54102,5714,40361,8062,89734,28685,20687,86500,15206,59704,54711,92006,69940,32525,61808,98786,68296,86193,40255,18302,62955,5968,95836,37929,87772,15514,2415,87937,3717,95348,40376,99049,36482,55530,31479,75730,98805,39556,78787,57148,22838,67432,99144,41239,71195,63765,30460,95190,8301,57042,98976,63689,21999,23326,45094,78079,79195,22645,49668,43560,71480,18053,83908,3602,2416,65430,12782,91911,46137,69239,55794,97703,56419,25936,40387,39071,8382,50362,14135,18666,45868,14574,32874,28451,73817,91070,73309,46854,50603,95542,90859,41277,84481,63636,54912,38498,804,89899,87523,68699,66651,39799,85095,44103,9599,20467,70332,13888,68756,60731,85431,95580,30208,39215,71758,75759,20642,24249,46238,81988,87788,75781,60470,8837,71735,27777,58579,85753,84246,98895,8204,56337,20537,44679,76079,70885,41136,70523,81335,11440,33211,85231,36174,78886,41454,66090,19725,72813,67877,45981,22742,53075,38400,96869,17419,71744,13040,99908,24450,47222,81286,40813,95388,39220,98343,47493,32044,45156,69318,88748,14183,53523,62605,98801,64450,39385,97519,24144,63189,78731,75289,97151,58756,39342,41811,30082,63014,58754,45702,31999,39133,22691,87932,71737,64286,8402,60583,53125,70983,5280,74119,14425,83746,96966,92443,50041,41225,58311,42963,45193,63059,64033,70708,87943,88726,75071,59938,42451,29782,24866,21557,58160,46031,58171,3897,75672,33826,61226,44707,7904,78140,11638,81527,48659,11283,76918,35855,41431,88765,21355,60713,45020,82947,86747,69421,35712,57297,51906,38526,41774,55577,54809,13560,621,71611,59493,80610,21769,7513,30382,20091,97891,17310,98919,47672,81918,85737,20469,43204,95019,21611,9368,40467,57489,6725,84964,35751,76144,70049,44987,18483,54904,85235,87959,26111,15531,17368,83253,56122,12042,18922,53476,15167,88683,88518,35857,58642,32205,57604,69067,65006,96500,25864,20112,36982,22965,18167,27569,185,13522,98840,65196,66171,68887,19838,3681,74899,16387,29769,12355,10008,55240,55304,32335,49349,77383,59550,13823,76258,80850,61612,63811,6178,2558,46122,15757,52375,18839,32878,35686,94102,77011,91745,51036,60438,19216,82328,51146,77559,87878,66423,84423,38836,67764,51799,82863,64561,98517,64065,69511,45677,81275,33956,62406,27328,96131,51325,25463,50017,16597,84568,12318,1500,69304,87810};
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            for (int i = 0; i < arrays.length-1; i++) {
                for (int j = 0; j <arrays.length-1-i; j++) {
                    if(arrays[j]>arrays[j+1]){
                        int tmp = arrays[j];
                        arrays[j]=arrays[j+1];
                        arrays[j+1]=tmp;
                    }
                }
            }
            stopWatch.stop();
            System.out.println("时间："+stopWatch.getLastTaskTimeMillis());
        }
    }



}

class MaoPao2{
    public static void main(String[] args) {

            Integer [] arrays  = {626,73377,93959,61970,95604,14832,46872,12856,92334,46658,38715,3889,65588,51628,91159,67725,52228,34565,76511,96496,34491,14705,66725,98238,15155,15575,58160,78023,44183,87996,23148,58871,39181,66582,96084,98543,72195,50873,79172,84291,2828,7932,31426,54847,71069,33742,56448,69927,6382,2268,86763,51959,64913,88228,49218,81883,63306,22224,93516,36927,85661,62577,84749,24159,52678,46291,30634,97490,60063,49526,57875,1082,82083,48435,35073,43417,40024,13305,34931,90400,73038,77972,17313,28874,35389,78124,80954,71267,97040,68439,23199,1701,71014,20974,98011,69765,80240,56975,35443,50223,63258,8641,72045,28300,77110,40,22694,45557,52336,4860,27631,70543,95390,63483,33153,10006,12301,6248,16591,97058,87192,66817,20256,87105,822,58677,4849,71304,56257,33133,20021,55101,69323,34235,94591,68945,6544,93300,22998,43775,4851,6022,50373,25948,61851,97745,35609,26933,70339,95127,41047,77625,90062,16117,49330,19502,17946,1635,93891,35621,59029,43678,50983,22134,33786,76722,13152,43935,81850,46605,52077,91961,72146,73034,62096,90685,27556,31528,92976,22417,49074,87503,15788,2148,38359,1137,42097,39824,71491,58375,54892,45146,70140,56745,61381,77692,92809,7647,65039,87144,45117,26490,81169,96970,20295,37558,72330,49001,48239,18643,69111,80796,42101,18866,78530,35715,43543,10839,8856,19938,22336,70934,36231,76358,77647,59864,24780,54148,86252,76154,10144,32740,25068,16759,63363,82352,68088,45770,97702,64383,11769,14365,83124,70591,19161,85402,86884,67870,87845,53192,63705,28826,42743,96434,99657,63225,84346,51708,55070,79126,33326,19948,79895,65580,71975,13672,65326,84153,60486,98697,32914,92636,55035,43270,48691,16290,38821,82383,18461,74791,49716,83839,4798,2824,75938,45587,23351,27666,80211,91155,53938,95461,83320,80993,90272,20247,68460,99225,48372,40877,29163,98566,51505,35162,22394,18839,14409,59671,68702,49203,69839,74231,68813,93380,29706,83596,65159,33349,11592,87634,59054,79551,1781,892,84750,26117,79131,80462,70574,65708,32053,80406,39983,63747,67706,22371,5072,96709,23134,20524,75867,26460,46467,21468,42188,25558,74914,6371,50876,85184,99704,60105,58054,57924,50571,75749,68623,97572,78046,44309,77532,14535,5706,49943,37880,15662,44961,29247,80046,86959,18425,35270,51294,83751,22873,45021,7041,74383,56814,78483,44539,87172,81738,10443,43501,84809,23525,35739,65663,76151,83476,72412,43080,490,99405,95284,82177,78761,34,52033,5351,5036,20881,34935,90055,53866,38238,49832,68530,47690,49785,51974,85436,97192,27125,89848,12923,76311,33448,84751,79776,33591,72047,96135,94610,65563,22841,23926,97896,21384,62530,51374,69083,21853,54780,48010,48552,55233,39809,25620,42714,1128,92311,90828,76921,55089,16151,83634,27198,92379,63984,77781,55953,59065,81646,80886,38907,91261,22970,93165,67410,30396,77791,27434,13976,80803,84699,25628,75152,25022,31278,66414,87825,14622,21496,32190,36893,93136,71353,19059,79767,72091,44013,87970,86046,60660,41155,26332,23133,25383,69665,55112,47898,79581,59274,17248,80639,71877,3823,40652,51087,62062,82585,69487,75504,95459,12761,84096,2006,9436,17591,43387,84977,60385,44643,59592,16810,2653,63055,87166,58063,14138,63564,63100,71062,19761,87855,95277,52991,66327,94852,97866,10946,88449,96418,77318,98037,64297,71273,88717,64350,33744,84535,30989,49810,11366,70533,37416,95911,85529,66310,10347,2409,29727,19531,76520,77412,44623,76943,55588,54947,19086,77056,77824,98326,32172,79721,16577,79651,67830,62709,1892,1070,8982,56389,99268,30149,4089,22707,93088,64851,63206,5753,36192,38041,35209,2998,86707,94288,78354,90362,6407,65117,78191,57953,22489,98765,38727,48941,93753,77334,9682,46949,56747,22511,20315,28751,77477,47669,68753,23189,59646,24493,57039,63844,80107,21230,64008,81406,2903,54781,67065,81987,65932,90069,54102,5714,40361,8062,89734,28685,20687,86500,15206,59704,54711,92006,69940,32525,61808,98786,68296,86193,40255,18302,62955,5968,95836,37929,87772,15514,2415,87937,3717,95348,40376,99049,36482,55530,31479,75730,98805,39556,78787,57148,22838,67432,99144,41239,71195,63765,30460,95190,8301,57042,98976,63689,21999,23326,45094,78079,79195,22645,49668,43560,71480,18053,83908,3602,2416,65430,12782,91911,46137,69239,55794,97703,56419,25936,40387,39071,8382,50362,14135,18666,45868,14574,32874,28451,73817,91070,73309,46854,50603,95542,90859,41277,84481,63636,54912,38498,804,89899,87523,68699,66651,39799,85095,44103,9599,20467,70332,13888,68756,60731,85431,95580,30208,39215,71758,75759,20642,24249,46238,81988,87788,75781,60470,8837,71735,27777,58579,85753,84246,98895,8204,56337,20537,44679,76079,70885,41136,70523,81335,11440,33211,85231,36174,78886,41454,66090,19725,72813,67877,45981,22742,53075,38400,96869,17419,71744,13040,99908,24450,47222,81286,40813,95388,39220,98343,47493,32044,45156,69318,88748,14183,53523,62605,98801,64450,39385,97519,24144,63189,78731,75289,97151,58756,39342,41811,30082,63014,58754,45702,31999,39133,22691,87932,71737,64286,8402,60583,53125,70983,5280,74119,14425,83746,96966,92443,50041,41225,58311,42963,45193,63059,64033,70708,87943,88726,75071,59938,42451,29782,24866,21557,58160,46031,58171,3897,75672,33826,61226,44707,7904,78140,11638,81527,48659,11283,76918,35855,41431,88765,21355,60713,45020,82947,86747,69421,35712,57297,51906,38526,41774,55577,54809,13560,621,71611,59493,80610,21769,7513,30382,20091,97891,17310,98919,47672,81918,85737,20469,43204,95019,21611,9368,40467,57489,6725,84964,35751,76144,70049,44987,18483,54904,85235,87959,26111,15531,17368,83253,56122,12042,18922,53476,15167,88683,88518,35857,58642,32205,57604,69067,65006,96500,25864,20112,36982,22965,18167,27569,185,13522,98840,65196,66171,68887,19838,3681,74899,16387,29769,12355,10008,55240,55304,32335,49349,77383,59550,13823,76258,80850,61612,63811,6178,2558,46122,15757,52375,18839,32878,35686,94102,77011,91745,51036,60438,19216,82328,51146,77559,87878,66423,84423,38836,67764,51799,82863,64561,98517,64065,69511,45677,81275,33956,62406,27328,96131,51325,25463,50017,16597,84568,12318,1500,69304,87810};
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            int k;
            int flag = arrays.length;
            while (flag>0) {
                k = flag;
                for (int j = 0; j <k-1; j++) {
                    if(arrays[j]>arrays[j+1]){
                        int tmp = arrays[j];
                        arrays[j]=arrays[j+1];
                        arrays[j+1]=tmp;
                        flag=j;
                    }
                }
            }
            stopWatch.stop();
            System.out.println("时间："+stopWatch.getLastTaskTimeMillis());
    }
}

class MaoPao3{
    public static void main(String[] args) {

            Integer [] arrays  = {626,73377,93959,61970,95604,14832,46872,12856,92334,46658,38715,3889,65588,51628,91159,67725,52228,34565,76511,96496,34491,14705,66725,98238,15155,15575,58160,78023,44183,87996,23148,58871,39181,66582,96084,98543,72195,50873,79172,84291,2828,7932,31426,54847,71069,33742,56448,69927,6382,2268,86763,51959,64913,88228,49218,81883,63306,22224,93516,36927,85661,62577,84749,24159,52678,46291,30634,97490,60063,49526,57875,1082,82083,48435,35073,43417,40024,13305,34931,90400,73038,77972,17313,28874,35389,78124,80954,71267,97040,68439,23199,1701,71014,20974,98011,69765,80240,56975,35443,50223,63258,8641,72045,28300,77110,40,22694,45557,52336,4860,27631,70543,95390,63483,33153,10006,12301,6248,16591,97058,87192,66817,20256,87105,822,58677,4849,71304,56257,33133,20021,55101,69323,34235,94591,68945,6544,93300,22998,43775,4851,6022,50373,25948,61851,97745,35609,26933,70339,95127,41047,77625,90062,16117,49330,19502,17946,1635,93891,35621,59029,43678,50983,22134,33786,76722,13152,43935,81850,46605,52077,91961,72146,73034,62096,90685,27556,31528,92976,22417,49074,87503,15788,2148,38359,1137,42097,39824,71491,58375,54892,45146,70140,56745,61381,77692,92809,7647,65039,87144,45117,26490,81169,96970,20295,37558,72330,49001,48239,18643,69111,80796,42101,18866,78530,35715,43543,10839,8856,19938,22336,70934,36231,76358,77647,59864,24780,54148,86252,76154,10144,32740,25068,16759,63363,82352,68088,45770,97702,64383,11769,14365,83124,70591,19161,85402,86884,67870,87845,53192,63705,28826,42743,96434,99657,63225,84346,51708,55070,79126,33326,19948,79895,65580,71975,13672,65326,84153,60486,98697,32914,92636,55035,43270,48691,16290,38821,82383,18461,74791,49716,83839,4798,2824,75938,45587,23351,27666,80211,91155,53938,95461,83320,80993,90272,20247,68460,99225,48372,40877,29163,98566,51505,35162,22394,18839,14409,59671,68702,49203,69839,74231,68813,93380,29706,83596,65159,33349,11592,87634,59054,79551,1781,892,84750,26117,79131,80462,70574,65708,32053,80406,39983,63747,67706,22371,5072,96709,23134,20524,75867,26460,46467,21468,42188,25558,74914,6371,50876,85184,99704,60105,58054,57924,50571,75749,68623,97572,78046,44309,77532,14535,5706,49943,37880,15662,44961,29247,80046,86959,18425,35270,51294,83751,22873,45021,7041,74383,56814,78483,44539,87172,81738,10443,43501,84809,23525,35739,65663,76151,83476,72412,43080,490,99405,95284,82177,78761,34,52033,5351,5036,20881,34935,90055,53866,38238,49832,68530,47690,49785,51974,85436,97192,27125,89848,12923,76311,33448,84751,79776,33591,72047,96135,94610,65563,22841,23926,97896,21384,62530,51374,69083,21853,54780,48010,48552,55233,39809,25620,42714,1128,92311,90828,76921,55089,16151,83634,27198,92379,63984,77781,55953,59065,81646,80886,38907,91261,22970,93165,67410,30396,77791,27434,13976,80803,84699,25628,75152,25022,31278,66414,87825,14622,21496,32190,36893,93136,71353,19059,79767,72091,44013,87970,86046,60660,41155,26332,23133,25383,69665,55112,47898,79581,59274,17248,80639,71877,3823,40652,51087,62062,82585,69487,75504,95459,12761,84096,2006,9436,17591,43387,84977,60385,44643,59592,16810,2653,63055,87166,58063,14138,63564,63100,71062,19761,87855,95277,52991,66327,94852,97866,10946,88449,96418,77318,98037,64297,71273,88717,64350,33744,84535,30989,49810,11366,70533,37416,95911,85529,66310,10347,2409,29727,19531,76520,77412,44623,76943,55588,54947,19086,77056,77824,98326,32172,79721,16577,79651,67830,62709,1892,1070,8982,56389,99268,30149,4089,22707,93088,64851,63206,5753,36192,38041,35209,2998,86707,94288,78354,90362,6407,65117,78191,57953,22489,98765,38727,48941,93753,77334,9682,46949,56747,22511,20315,28751,77477,47669,68753,23189,59646,24493,57039,63844,80107,21230,64008,81406,2903,54781,67065,81987,65932,90069,54102,5714,40361,8062,89734,28685,20687,86500,15206,59704,54711,92006,69940,32525,61808,98786,68296,86193,40255,18302,62955,5968,95836,37929,87772,15514,2415,87937,3717,95348,40376,99049,36482,55530,31479,75730,98805,39556,78787,57148,22838,67432,99144,41239,71195,63765,30460,95190,8301,57042,98976,63689,21999,23326,45094,78079,79195,22645,49668,43560,71480,18053,83908,3602,2416,65430,12782,91911,46137,69239,55794,97703,56419,25936,40387,39071,8382,50362,14135,18666,45868,14574,32874,28451,73817,91070,73309,46854,50603,95542,90859,41277,84481,63636,54912,38498,804,89899,87523,68699,66651,39799,85095,44103,9599,20467,70332,13888,68756,60731,85431,95580,30208,39215,71758,75759,20642,24249,46238,81988,87788,75781,60470,8837,71735,27777,58579,85753,84246,98895,8204,56337,20537,44679,76079,70885,41136,70523,81335,11440,33211,85231,36174,78886,41454,66090,19725,72813,67877,45981,22742,53075,38400,96869,17419,71744,13040,99908,24450,47222,81286,40813,95388,39220,98343,47493,32044,45156,69318,88748,14183,53523,62605,98801,64450,39385,97519,24144,63189,78731,75289,97151,58756,39342,41811,30082,63014,58754,45702,31999,39133,22691,87932,71737,64286,8402,60583,53125,70983,5280,74119,14425,83746,96966,92443,50041,41225,58311,42963,45193,63059,64033,70708,87943,88726,75071,59938,42451,29782,24866,21557,58160,46031,58171,3897,75672,33826,61226,44707,7904,78140,11638,81527,48659,11283,76918,35855,41431,88765,21355,60713,45020,82947,86747,69421,35712,57297,51906,38526,41774,55577,54809,13560,621,71611,59493,80610,21769,7513,30382,20091,97891,17310,98919,47672,81918,85737,20469,43204,95019,21611,9368,40467,57489,6725,84964,35751,76144,70049,44987,18483,54904,85235,87959,26111,15531,17368,83253,56122,12042,18922,53476,15167,88683,88518,35857,58642,32205,57604,69067,65006,96500,25864,20112,36982,22965,18167,27569,185,13522,98840,65196,66171,68887,19838,3681,74899,16387,29769,12355,10008,55240,55304,32335,49349,77383,59550,13823,76258,80850,61612,63811,6178,2558,46122,15757,52375,18839,32878,35686,94102,77011,91745,51036,60438,19216,82328,51146,77559,87878,66423,84423,38836,67764,51799,82863,64561,98517,64065,69511,45677,81275,33956,62406,27328,96131,51325,25463,50017,16597,84568,12318,1500,69304,87810};
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            for (int i = 0; i < arrays.length-1; i++) {
                int flag = 0;
                for (int j = 0; j <arrays.length-1-i; j++) {
                    int tmp ;
                    if(arrays[j]>arrays[j+1]){
                        tmp = arrays[j];
                        arrays[j] = arrays[j+1];
                        arrays[j+1] = tmp;
                        flag = 1;
                    }
                }
                if(flag==0){
                    break;
                }
            }
            stopWatch.stop();
            System.out.println("时间："+stopWatch.getLastTaskTimeMillis());
            for (Integer array : arrays) {
                System.out.println(array);
            }
    }
}
class KuaiPai{
    public static void main(String[] args) {

            //int [] arrays  = {626,73377,93959,61970,95604,14832,46872,12856,92334,46658,38715,3889,65588,51628,91159,67725,52228,34565,76511,96496,34491,14705,66725,98238,15155,15575,58160,78023,44183,87996,23148,58871,39181,66582,96084,98543,72195,50873,79172,84291,2828,7932,31426,54847,71069,33742,56448,69927,6382,2268,86763,51959,64913,88228,49218,81883,63306,22224,93516,36927,85661,62577,84749,24159,52678,46291,30634,97490,60063,49526,57875,1082,82083,48435,35073,43417,40024,13305,34931,90400,73038,77972,17313,28874,35389,78124,80954,71267,97040,68439,23199,1701,71014,20974,98011,69765,80240,56975,35443,50223,63258,8641,72045,28300,77110,40,22694,45557,52336,4860,27631,70543,95390,63483,33153,10006,12301,6248,16591,97058,87192,66817,20256,87105,822,58677,4849,71304,56257,33133,20021,55101,69323,34235,94591,68945,6544,93300,22998,43775,4851,6022,50373,25948,61851,97745,35609,26933,70339,95127,41047,77625,90062,16117,49330,19502,17946,1635,93891,35621,59029,43678,50983,22134,33786,76722,13152,43935,81850,46605,52077,91961,72146,73034,62096,90685,27556,31528,92976,22417,49074,87503,15788,2148,38359,1137,42097,39824,71491,58375,54892,45146,70140,56745,61381,77692,92809,7647,65039,87144,45117,26490,81169,96970,20295,37558,72330,49001,48239,18643,69111,80796,42101,18866,78530,35715,43543,10839,8856,19938,22336,70934,36231,76358,77647,59864,24780,54148,86252,76154,10144,32740,25068,16759,63363,82352,68088,45770,97702,64383,11769,14365,83124,70591,19161,85402,86884,67870,87845,53192,63705,28826,42743,96434,99657,63225,84346,51708,55070,79126,33326,19948,79895,65580,71975,13672,65326,84153,60486,98697,32914,92636,55035,43270,48691,16290,38821,82383,18461,74791,49716,83839,4798,2824,75938,45587,23351,27666,80211,91155,53938,95461,83320,80993,90272,20247,68460,99225,48372,40877,29163,98566,51505,35162,22394,18839,14409,59671,68702,49203,69839,74231,68813,93380,29706,83596,65159,33349,11592,87634,59054,79551,1781,892,84750,26117,79131,80462,70574,65708,32053,80406,39983,63747,67706,22371,5072,96709,23134,20524,75867,26460,46467,21468,42188,25558,74914,6371,50876,85184,99704,60105,58054,57924,50571,75749,68623,97572,78046,44309,77532,14535,5706,49943,37880,15662,44961,29247,80046,86959,18425,35270,51294,83751,22873,45021,7041,74383,56814,78483,44539,87172,81738,10443,43501,84809,23525,35739,65663,76151,83476,72412,43080,490,99405,95284,82177,78761,34,52033,5351,5036,20881,34935,90055,53866,38238,49832,68530,47690,49785,51974,85436,97192,27125,89848,12923,76311,33448,84751,79776,33591,72047,96135,94610,65563,22841,23926,97896,21384,62530,51374,69083,21853,54780,48010,48552,55233,39809,25620,42714,1128,92311,90828,76921,55089,16151,83634,27198,92379,63984,77781,55953,59065,81646,80886,38907,91261,22970,93165,67410,30396,77791,27434,13976,80803,84699,25628,75152,25022,31278,66414,87825,14622,21496,32190,36893,93136,71353,19059,79767,72091,44013,87970,86046,60660,41155,26332,23133,25383,69665,55112,47898,79581,59274,17248,80639,71877,3823,40652,51087,62062,82585,69487,75504,95459,12761,84096,2006,9436,17591,43387,84977,60385,44643,59592,16810,2653,63055,87166,58063,14138,63564,63100,71062,19761,87855,95277,52991,66327,94852,97866,10946,88449,96418,77318,98037,64297,71273,88717,64350,33744,84535,30989,49810,11366,70533,37416,95911,85529,66310,10347,2409,29727,19531,76520,77412,44623,76943,55588,54947,19086,77056,77824,98326,32172,79721,16577,79651,67830,62709,1892,1070,8982,56389,99268,30149,4089,22707,93088,64851,63206,5753,36192,38041,35209,2998,86707,94288,78354,90362,6407,65117,78191,57953,22489,98765,38727,48941,93753,77334,9682,46949,56747,22511,20315,28751,77477,47669,68753,23189,59646,24493,57039,63844,80107,21230,64008,81406,2903,54781,67065,81987,65932,90069,54102,5714,40361,8062,89734,28685,20687,86500,15206,59704,54711,92006,69940,32525,61808,98786,68296,86193,40255,18302,62955,5968,95836,37929,87772,15514,2415,87937,3717,95348,40376,99049,36482,55530,31479,75730,98805,39556,78787,57148,22838,67432,99144,41239,71195,63765,30460,95190,8301,57042,98976,63689,21999,23326,45094,78079,79195,22645,49668,43560,71480,18053,83908,3602,2416,65430,12782,91911,46137,69239,55794,97703,56419,25936,40387,39071,8382,50362,14135,18666,45868,14574,32874,28451,73817,91070,73309,46854,50603,95542,90859,41277,84481,63636,54912,38498,804,89899,87523,68699,66651,39799,85095,44103,9599,20467,70332,13888,68756,60731,85431,95580,30208,39215,71758,75759,20642,24249,46238,81988,87788,75781,60470,8837,71735,27777,58579,85753,84246,98895,8204,56337,20537,44679,76079,70885,41136,70523,81335,11440,33211,85231,36174,78886,41454,66090,19725,72813,67877,45981,22742,53075,38400,96869,17419,71744,13040,99908,24450,47222,81286,40813,95388,39220,98343,47493,32044,45156,69318,88748,14183,53523,62605,98801,64450,39385,97519,24144,63189,78731,75289,97151,58756,39342,41811,30082,63014,58754,45702,31999,39133,22691,87932,71737,64286,8402,60583,53125,70983,5280,74119,14425,83746,96966,92443,50041,41225,58311,42963,45193,63059,64033,70708,87943,88726,75071,59938,42451,29782,24866,21557,58160,46031,58171,3897,75672,33826,61226,44707,7904,78140,11638,81527,48659,11283,76918,35855,41431,88765,21355,60713,45020,82947,86747,69421,35712,57297,51906,38526,41774,55577,54809,13560,621,71611,59493,80610,21769,7513,30382,20091,97891,17310,98919,47672,81918,85737,20469,43204,95019,21611,9368,40467,57489,6725,84964,35751,76144,70049,44987,18483,54904,85235,87959,26111,15531,17368,83253,56122,12042,18922,53476,15167,88683,88518,35857,58642,32205,57604,69067,65006,96500,25864,20112,36982,22965,18167,27569,185,13522,98840,65196,66171,68887,19838,3681,74899,16387,29769,12355,10008,55240,55304,32335,49349,77383,59550,13823,76258,80850,61612,63811,6178,2558,46122,15757,52375,18839,32878,35686,94102,77011,91745,51036,60438,19216,82328,51146,77559,87878,66423,84423,38836,67764,51799,82863,64561,98517,64065,69511,45677,81275,33956,62406,27328,96131,51325,25463,50017,16597,84568,12318,1500,69304,87810};
            //int [] arrays  = {5,2,4,7,3,6,4,8,9,10};
            int [] arrays  = {5,7,6,8,10,4,3,2,1,9};
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            //System.out.println(qsort(arrays,0,(arrays.length)-1));
            dofun(arrays,0,arrays.length-1);
            for (int array : arrays) {
                System.out.println(array);
            }
            stopWatch.stop();
            System.out.println("时间："+stopWatch.getLastTaskTimeMillis());
    }
    static void dofun(int[] arrays, int left, int right){
        if(left>=right){
            return;
        }
        //拿最左边的当基数 比较
        int key = arrays[left];
        int l = left;
        int r = right;
        while (l<r){
            //r 向左移  直到比key小  然后获取当前索引  key是左边的 先移动右边指针
            while (arrays[r] >= key && l<r){
                r--;
            }
            //l 向右移  直到比key大  然后获取当前索引
            while (arrays[l] <= key && l<r){
                l++;
            }
            //交换位置
            if(l<r){
                int temp = arrays[l];
                arrays[l] = arrays[r];
                arrays[r] = temp;
            }
        }
        //相等交换位置 上面是l<r 当l=r
        arrays[left]=arrays[l];
        arrays[l]=key;
        dofun(arrays, left, l-1);
        dofun(arrays, l+1, right);
    }

}

class Singleton{
    /**
     * 饿汉式
     * */
    //直接创建对象
    private static Singleton singleton = new Singleton();
    //私有化构造方法

    private Singleton() {
    }

    //提供对外方法
    public static Singleton getSingle(){
        return singleton;
    }

}
class Singleton1{
    /**
     * 懒汉式
     * */
    //直接创建对象
    private volatile static Singleton1 singleton = null;
    //私有化构造方法

    private Singleton1() {
    }

    //提供对外方法
    public synchronized static Singleton1 getSingle(){
        if(singleton==null){
            singleton = new Singleton1();
        }
        return singleton;
    }

}
class SingletonTest{

    //通过多线程调用一下试试
    public static void main(String[] args) {
        CopyOnWriteArraySet<Object> objects = new CopyOnWriteArraySet<>();
        for (int i = 0; i < 1000; i++) {
            new Thread(()->{
                Singleton1 single = Singleton1.getSingle();
                objects.add(single);
                //System.out.println(single.hashCode());
            },i+"").start();
        }
        System.out.println("长度"+objects.size());
        for (Object object : objects) {
            System.out.println(object.hashCode());
        }
    }


}


class KP{
    public static void main(String[] args) {
        int [] arr = {5,7,6,8,10,4,3,2,1,9};
        //int [] arr = {5,7,6,8,10,4,3,2,1,9};
        sortArr(arr,0,arr.length-1);
        System.out.println("长度:"+arr.length);
        for (int i : arr) {
            System.out.println(i);
        }

    }

    static void sortArr(int [] arr,int left,int right){
        if (left>=right){
            return;
        }
        //比较对象
        int key = arr[left];
        int l = left;
        int r = right;
        while (l<r){
            //右边 指针左移 直到找到小于等于key的值
            while (arr[r]>=key && l<r){
                r--;
            }
            //左边 指针右移 直到找到大于等于key的值
            while (arr[l]<=key && l<r){
                l++;
            }
            if(l<r){
                //交换位置
                int temp = arr[r];
                arr[r] = arr[l];
                arr[l] = temp;
            }
        }
        //指针指向同一位置时 交换key和当前指针的位置
        arr[left] = arr[l];
        arr[l] = key;
        //递归执行
        sortArr(arr,left,l-1);
        sortArr(arr,l+1,right);
    }


}








